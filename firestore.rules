rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper to check membership against a project document
    function isProjectMember(project) {
      return isSignedIn() && (
        project.data.assignedCustomerId == request.auth.uid ||
        project.data.assignedContractorId == request.auth.uid
      );
    }

    match /projects/{projectId} {
      // Read allowed if the user is assigned to the project
      allow get: if isProjectMember(resource);
      // Allow list (queries) when every returned doc is for a project the user belongs to
      allow list: if isSignedIn() && isProjectMember(resource);

      // Create allowed if the new doc assigns the caller as customer or contractor
      allow create: if isSignedIn() && (
        request.resource.data.assignedCustomerId == request.auth.uid ||
        request.resource.data.assignedContractorId == request.auth.uid
      );

      // Update/delete allowed if caller is an existing member AND cannot reassign membership
      allow update, delete: if isProjectMember(resource)
        && request.resource.data.assignedCustomerId == resource.data.assignedCustomerId
        && request.resource.data.assignedContractorId == resource.data.assignedContractorId;
    }

    match /updates/{updateId} {
      // Read/update/delete only by members of the linked project
      allow read, update, delete: if isSignedIn() &&
        isProjectMember(get(/databases/$(database)/documents/projects/$(resource.data.projectId)));

      // Create allowed only if caller is member of the project referenced by projectId
      allow create: if isSignedIn() &&
        isProjectMember(get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)));
    }

    // Invoices owned by a user. Only the owner can read/write their invoices.
    match /invoices/{invoiceId} {
      allow read, list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Notifications: user-specific
    match /notifications/{notificationId} {
      // Only the owner can read/update/delete their notifications
      allow get, list, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      // Allow creation by any signed-in user (prototype). In production, prefer server-side creation.
      allow create: if isSignedIn();
    }

    // Users profile and FCM tokens (for push notifications)
    match /users/{userId} {
      allow get, list, create, update: if isSignedIn() && request.auth.uid == userId;
      // Do not allow delete of root user doc via client
      allow delete: if false;
      match /tokens/{tokenId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // Leads collection: public write-only for email capture on the marketing site
    match /leads/{leadId} {
      // Allow anyone to create a lead (email capture from marketing page)
      // Rate limiting: prevent duplicate emails within 24 hours
      allow create: if request.resource.data.keys().hasAll(['email', 'source', 'timestamp'])
        && request.resource.data.email is string
        && request.resource.data.email.matches('.*@.*')
        && request.resource.data.source is string
        && request.resource.data.timestamp == request.time
        && !exists(/databases/$(database)/documents/leads/$(request.resource.data.email.lower()));
      // Only authenticated admins or backend can read/update/delete
      allow read, list: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
